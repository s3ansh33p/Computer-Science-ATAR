<!DOCTYPE html>
<html lang="en">

    <%- include('./components/header.ejs'); %>
    <head>
        <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/figlet/lib/figlet.js"></script>
        <script src="<%= type; %>/js/util.js"></script>
        <script src="<%= type; %>/js/vendor/lolcat.js"></script>
        <script src="<%= type; %>/js/vendor/jquery.terminal.js"></script>
        <script src="<%= type; %>/js/vendor/unix_formatting.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/jquery.terminal@2.x.x/css/jquery.terminal.min.css"/> 
        <style>
            table td {
                padding: 5px;
                border-color: var(--color);
            }
            #terminal {
                height: 100%;
            }

            .terminal-table {
                overflow-x: auto;
            }
            
            .terminal-table::-webkit-scrollbar {
                background: var(--background,#000);
                height: 6px;
                width: 6px;
            }
            .terminal-table::-webkit-scrollbar-thumb, .terminal-table::-webkit-scrollbar-thumb:hover {
                    background: var(--color,#aaa);
                }
            :root {
                --background: #000;
                --color: #aaa;
            }
        </style>
    </head>
    <body>
        <div id="terminal"></div>
<script>
const spinner = {"interval": 80,
    "frames": [
        "⠋",
        "⠙",
        "⠹",
        "⠸",
        "⠼",
        "⠴",
        "⠦",
        "⠧",
        "⠇",
        "⠏"
    ]
}
let spinnerText = '';
let animation = false;
let timer;
let prompt;
let frameIndex;
let dataflow = false;
var term = $('#terminal').terminal({
    friends: function(userid) {
        spinnerText = 'Fetching data';
        start();
        try {
            $.ajax({
                url: '<%= type; %>/api/friends/'+userid,
                timeout: 1500,
                error: function () {
                    term.echo('Friends API timed out.');
                },
                success: function (payload) {
                    if (payload.players.length === 0) {
                        term.echo($(`<span>No friends found for User #${userid}</span><br><br>`));
                    } else {
                        term.echo(`There ${(payload.players.length === 1) ? 'is' : 'are'} ${payload.players.length} record${(payload.players.length === 1) ? '' : 's'} found for User #${userid}`);
                        let html = `<br><table><tbody><tr>
                                <td>Username</td>
                                <td>Online</td>
                                <td>Accepted</td>
                                </tr>`;
                        for (let i=0; i<payload.players.length; i++) {
                            html += `<tr><td>${payload.players[i].username}</td>
                                    <td>${payload.players[i].isOnline}</td>
                                    <td>${payload.players[i].accepted}</td>`;
                        }
                        html += "</tbody></table><br><br>";
                        term.echo($(html));
                    }
                }
            })
        } catch(err) {
            console.log(err);
        }
        end();
    },
    color: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            document.documentElement.style.setProperty('--background', '#000');            
            document.documentElement.style.setProperty('--color', '#aaa');            
        } else {
            if (options[0].toString().length === 1) {
                options[0] = "0"+options[0];
            }
            if (options[0].toString().length !== 2 || !isHex(options[0].toString()[0]) || !isHex(options[0].toString()[1])) {
                term.exec('help color');
            } else {
                const colors = ['#000','#00f','#080','#0ff','#ff0','#f0f','#ff0','#fff','#aaa','#0cf','#0f0','#eff','#f44','#b7f','#ff8'];
                document.documentElement.style.setProperty('--background', colors[parseInt(options[0].toString()[0],16)]);
                document.documentElement.style.setProperty('--color', colors[parseInt(options[0].toString()[1],16)]);
            }
        }
    },
    mysql: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            this.exec('help mysql');
        } else {
            spinnerText = 'Running query';
            start();
            $.post('<%= type; %>/shell/mysql', {command: options.join(' ')}).then(function(response) {
                if (response.errno) {
                    term.echo(JSON.stringify(response))
                } else {
                    if (response.length === 0) {
                        term.echo('No records returned');
                    } else {
                        let html = '<br><div class="terminal-table"><table><tbody><tr>';
                        for (let i=0;i<Object.getOwnPropertyNames(response[0]).length; i++) {
                            html += `<td>${Object.getOwnPropertyNames(response[0])[i]}</td>`;
                        }
                        html += '</tr>';
                        for (let i=0;i<response.length; i++) {
                            html += '<tr>';
                            for (let j=0;j<Object.getOwnPropertyNames(response[0]).length; j++) {
                                html += `<td>${response[i][Object.getOwnPropertyNames(response[0])[j]]}</td>`;
                            }
                            html += '</tr>';
                        }
                        html += '</tbody></table></div><br>';
                        term.echo($(html));
                    }
                }
            });
            end();
        }  
    },
    games: function(gameid) {
        spinnerText = 'Fetching data';
        start();
        try {
            $.ajax({
                url: '<%= type; %>/api/games/'+gameid,
                timeout: 1500,
                error: function () {
                    term.echo('Games API timed out.');
                },
                success: function (payload) {
                    if (payload.error) {
                        term.echo($(`<span>${payload.error}</span><br><br>`));
                    } else {
                        term.echo($(`<span>
                            Game Information for Game #${gameid}
                            <br><br>
                            Map: ${gameInfo.maps[payload.map].name} (${payload.map})<br>
                            ${gameInfo.maps[payload.map].description}<br><br>
                            Mode: ${gameInfo.modes[payload.mode].name} (${payload.map})<br>
                            ${gameInfo.modes[payload.mode].description}<br><br>
                            Start Time: ${payload.startTime}<br>
                            Duration: ${payload.duration}<br>
                            Winner: ${payload.winner}<br>
                            </span>`));
                        if (payload.players.length === 0) {
                            term.echo(`No players found for Game #${userid}`);
                        } else {
                            let html = `<br><table><tbody><tr>
                                <td>ID</td>
                                <td>Username</td>
                                <td>Rank</td>
                                <td>Kills</td>
                                <td>Deaths</td>
                                <td>Assists</td>
                                <td>Score</td>
                                </tr>`;
                            for (let i=0; i<payload.players.length; i++) {
                                html += `<tr><td>${payload.players[i].id}</td>
                                    <td>${payload.players[i].username}</td>
                                    <td>${gameInfo.ranks[payload.players[i].curRank]}</td>
                                    <td>${payload.players[i].kills}</td>
                                    <td>${payload.players[i].deaths}</td>
                                    <td>${payload.players[i].assists}</td>
                                    <td>${payload.players[i].kills*2+payload.players[i].assists}</td></tr>`;
                            }
                            html += '</tbody></table><br>';
                            term.echo($(html));
                        }
                    }
                }
            })
        } catch(err) {
            console.log(err);
        }
        end();
    },
    help: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            let commandContainer = `<span>
                For more information on a specific command, type help 'command-name'<br><br>
                <table>
                    <tbody>`;
            for (let i=0; i<commands.length; i++) {
                commandContainer += `<tr>
                            <td>
                                ${commands[i].name}
                            </td>
                            <td>
                                ${commands[i].descriptor}
                            </td>
                        </tr>`;
            }

            commandContainer += `</tbody>
                </table>
            </span><br>`;
            const div = $(commandContainer);
            this.echo(div);
        } else {
            let valid = false;
            let validIndex = -1;
            for (let i=0; i<commands.length; i++) {
                if (commands[i].name === options[0].toUpperCase()) {
                    valid = true;
                    validIndex = i;
                }
            }
            if (!valid) {
                this.echo('Not a valid command')
            } else {
                let argsText = '';
                let argsDescriptors = '';
                if (commands[validIndex].arguments !== undefined) {
                    for (let i=0; i<commands[validIndex].arguments.length; i++) {
                        argsText += `${commands[validIndex].name} [${Object.getOwnPropertyNames(commands[validIndex].arguments[i]).toString()}]<br>`;
                        argsDescriptors += `${Object.getOwnPropertyNames(commands[validIndex].arguments[i]).toString()} - ${commands[validIndex].arguments[i][Object.getOwnPropertyNames(commands[validIndex].arguments[i])]}<br>`;
                    }
                }
                let commandContainer = `<span>
                    ${commands[validIndex].descriptor}<br>
                    ${(argsText !== '') ? '<br>'+argsText : ''}
                    ${(argsDescriptors !== '') ? '<br>'+argsDescriptors : ''}
                    ${(commands[validIndex].extra !== undefined) ? `<br>${commands[validIndex].extra}<br>` : ''}
                    ${(commands[validIndex].example !== undefined) ? `<br>Example: ${commands[validIndex].example}<br>` : ''}
                    <br>
                </span>`;
                const div = $(commandContainer);
                this.echo(div);
            }
        }
    },
    live: function() {
        // Todo: create API for info
        spinnerText = 'Fetching live data from internal APIs';
        start();
        setTimeout(() => {
            spinnerText = 'Pass 1/4';
        }, 400);
        setTimeout(() => {
            spinnerText = 'Pass 2/4';
        }, 600);
        setTimeout(() => {
            spinnerText = 'Pass 3/4';
        }, 1100);
        setTimeout(() => {
            spinnerText = 'Pass 4/4';
        }, 1600);
        setTimeout(() => {
            spinnerText = 'Tabulating data';
        }, 2100);
        setTimeout(() => {
            end();
            this.echo($(`<span>Live statistics as at ${new Date().toLocaleTimeString()}<br><br>Online Players: 13<br>Active Games: 2<br><br>Total Players: 42<br>Total Games: 14</span>`));
        }, 2900);
    },
    sudo: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            this.exec('help sudo');
        } else {
            term.pause();
            $.post('<%= type; %>/shell/sudo', {command: options.join(' ')}).then(function(response) {
                term.echo(response).resume();
            });
        }       
    },
    chat: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            this.exec('help chat');
        } else {
            term.pause();
            $.post('<%= type; %>/shell/chat', {message: options.join(' ')}).then(function(response) {
                term.echo(response).resume();
            });
        }       
    },
    data: function(...args) {
        let options = ($.terminal.parse_options(args))["_"];
        if (options[0] === undefined) {
            this.exec('help data');
        } else {
            function getData() {
                $.post('<%= type; %>/shell/data', {message: options.join(' ')}).then(function(response) {
                    response = JSON.parse(response);
                    let html = `<br><br><table style="background-color: var(--background,#000); color: var(--color,#aaa);"><tbody><tr>
                            <td>Client</td>
                            <td>Username</td>
                            <td>Team</td>
                            <td>X Coord</td>
                            <td>Y Coord</td>
                            <td>Z Coord</td>
                            <td>Rotation</td>
                        </tr>`;
                    for (let i=0; i<response.length; i++) {
                        html += `<tr>
                                <td>${response[i].client}</td>
                                <td>${response[i].userData.username}</td>
                                <td>${(response[i].userData.team) ? 'CT' : 'T'}</td>`;
                        if (response[i].playerData[0] === undefined) {
                            html += `               
                                <td>0</td>
                                <td>0</td>
                                <td>0</td>
                                <td>0</td>
                            </tr>`;
                        } else {
                            let x = parseFloat( ((response[i].playerData[0].toString().slice(0,1) === "2") ? "-" : "" ) + response[i].playerData[0].toString().slice(1) + "." + response[i].playerData[1].toString().slice(1) );
                            let y = parseFloat( ((response[i].playerData[2].toString().slice(0,1) === "2") ? "-" : "" ) + response[i].playerData[2].toString().slice(1) + "." + response[i].playerData[3].toString().slice(1) );
                            let z = parseFloat( ((response[i].playerData[4].toString().slice(0,1) === "2") ? "-" : "" ) + response[i].playerData[4].toString().slice(1) + "." + response[i].playerData[5].toString().slice(1) );
                            let r = parseFloat( ((response[i].playerData[6] === 1) ? -1 : 1) * response[i].playerData[7] );

                            html += `               
                                <td>${x}</td>
                                <td>${y}</td>
                                <td>${z}</td>
                                <td>${r}</td>
                            </tr>`;
                        }
                    }
                    html += '</tbody></table><br>';
                    if (dataflow) {
                        $('#terminal').children()[0].children[1].children[term.last_index()].children[0].innerHTML = `<span style="color:red;--color:red;--original-color:red;" data-text="@dev.seanmcginty.space >>> "><span>@dev.seanmcginty.space&nbsp;&gt;&gt;&gt;&nbsp;</span></span><span data-text="data ${options.join(' ')}">data ${options.join(' ')}</span>` + html;
                        setTimeout(() => {
                            getData();
                        }, 100);
                    }
                });
            };
            dataflow = true;
            getData();

        }       
    }
}, {
    checkArity: false,
    keydown: function(e) {
        if (animation) {
            return false;
        }
        if (dataflow) {
            dataflow = false;
            this.echo('Data view updates stopped.');
            return false;
        }
    },
    // Auto start with custom color profile
    onInit: () => {
        setTimeout(() => {
            term.exec('color 0a');
        }, 100);
    }
});

const keywordsMySQL = [
    'ACCESSIBLE', 'ADD', 'ALL', 'ALTER', 'ANALYZE', 'AND', 'AS', 'ASC',
    'ASENSITIVE', 'BEFORE', 'BETWEEN', 'BIGINT', 'BINARY', 'BLOB',
    'BOTH', 'BY', 'CALL', 'CASCADE', 'CASE', 'CHANGE', 'CHAR',
    'CHARACTER', 'CHECK', 'COLLATE', 'COLUMN', 'CONDITION',
    'CONSTRAINT', 'CONTINUE', 'CONVERT', 'CREATE', 'CROSS',
    'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER',
    'CURSOR', 'DATABASE', 'DATABASES', 'DAY_HOUR', 'DAY_MICROSECOND',
    'DAY_MINUTE', 'DAY_SECOND', 'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT',
    'DELAYED', 'DELETE', 'DESC', 'DESCRIBE', 'DETERMINISTIC',
    'DISTINCT', 'DISTINCTROW', 'DIV', 'DOUBLE', 'DROP', 'DUAL', 'EACH',
    'ELSE', 'ELSEIF', 'ENCLOSED', 'ESCAPED', 'EXISTS', 'EXIT',
    'EXPLAIN', 'FALSE', 'FETCH', 'FLOAT', 'FLOAT4', 'FLOAT8', 'FOR',
    'FORCE', 'FOREIGN', 'FROM', 'FULLTEXT', 'GRANT', 'GROUP', 'HAVING',
    'HIGH_PRIORITY', 'HOUR_MICROSECOND', 'HOUR_MINUTE', 'HOUR_SECOND',
    'IF', 'IGNORE', 'IN', 'INDEX', 'INFILE', 'INNER', 'INOUT',
    'INSENSITIVE', 'INSERT', 'INT', 'INT1', 'INT2', 'INT3', 'INT4',
    'INT8', 'INTEGER', 'INTERVAL', 'INTO', 'IS', 'ITERATE', 'JOIN',
    'KEY', 'KEYS', 'KILL', 'LEADING', 'LEAVE', 'LEFT', 'LIKE', 'LIMIT',
    'LINEAR', 'LINES', 'LOAD', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCK',
    'LONG', 'LONGBLOB', 'LONGTEXT', 'LOOP', 'LOW_PRIORITY',
    'MASTER_SSL_VERIFY_SERVER_CERT', 'MATCH', 'MEDIUMBLOB', 'MEDIUMINT',
    'MEDIUMTEXT', 'MIDDLEINT', 'MINUTE_MICROSECOND', 'MINUTE_SECOND',
    'MOD', 'MODIFIES', 'NATURAL', 'NOT', 'NO_WRITE_TO_BINLOG', 'NULL',
    'NUMERIC', 'ON', 'OPTIMIZE', 'OPTION', 'OPTIONALLY', 'OR', 'ORDER',
    'OUT', 'OUTER', 'OUTFILE', 'PRECISION', 'PRIMARY', 'PROCEDURE',
    'PURGE', 'RANGE', 'READ', 'READS', 'READ_WRITE', 'REAL',
    'REFERENCES', 'REGEXP', 'RELEASE', 'RENAME', 'REPEAT', 'REPLACE',
    'REQUIRE', 'RESTRICT', 'RETURN', 'REVOKE', 'RIGHT', 'RLIKE',
    'SCHEMA', 'SCHEMAS', 'SECOND_MICROSECOND', 'SELECT', 'SENSITIVE',
    'SEPARATOR', 'SET', 'SHOW', 'SMALLINT', 'SPATIAL', 'SPECIFIC',
    'SQL', 'SQLEXCEPTION', 'SQLSTATE', 'SQLWARNING', 'SQL_BIG_RESULT',
    'SQL_CALC_FOUND_ROWS', 'SQL_SMALL_RESULT', 'SSL', 'STARTING',
    'STRAIGHT_JOIN', 'TABLE', 'TERMINATED', 'THEN', 'TINYBLOB',
    'TINYINT', 'TINYTEXT', 'TO', 'TRAILING', 'TRIGGER', 'TRUE', 'UNDO',
    'UNION', 'UNIQUE', 'UNLOCK', 'UNSIGNED', 'UPDATE', 'USAGE', 'USE',
    'USING', 'UTC_DATE', 'UTC_TIME', 'UTC_TIMESTAMP', 'VALUES',
    'VARBINARY', 'VARCHAR', 'VARCHARACTER', 'VARYING', 'WHEN', 'WHERE',
    'WHILE', 'WITH', 'WRITE', 'XOR', 'YEAR_MONTH', 'ZEROFILL'];
var keywords = keywordsMySQL.concat(keywordsMySQL.map(function(keyword) {
    return keyword;
}));
$.terminal.defaults.formatters.push(function(string) {
    return string.split(/((?:\s|&nbsp;)+)/).map(function(string) {
        if (keywords.indexOf(string) != -1) {
            return '[[b;white;]' + string + ']';
        } else {
            return string;
        }
    }).join('');
});

term.set_prompt(function(set_prompt) {
    set_prompt('[[;red;]<%= session.username %>@dev.seanmcginty.space >>> ]');
});

function start() {
    animation = true;
    frameIndex = 0;
    function set() {
        var text = `${spinner.frames[frameIndex++ % spinner.frames.length]} ${spinnerText} `;
        term.set_prompt(text);
    };
    prompt = term.get_prompt();
    term.find('.cursor').hide();
    set();
    timer = setInterval(set, spinner.interval);
}

function end() {
    setTimeout(function() {
        clearInterval(timer);
        spinnerText = '';
        var frame = '';
        term.set_prompt(prompt).echo(frame);
        animation = false;
        term.find('.cursor').show();
    }, 0);
}

// Init
fonts()

// As documented in https://docs.google.com/document/d/1TK5HlipziA2nSvrkaUz8Xi36uU8StKVAvU3BXdNLBgE/edit
const gameInfo = {
    'modes': [{
        'name': 'Capture the flag',
        'description': 'In two teams of up to five players, each team has a flag in a dedicated area, with the goal being to capture the opponents flag and bring it to their own dedicated area for a flag.'
    },{
        'name': 'Deathmatch',
        'description': 'FFA (free for all) style. This mode is for people who want to practise aim or get used to the game.'
    },{
        'name': 'Capture the flag (with FF)',
        'description': 'Same as Capture the Flag, though Friendly Fire is enabled such that a teammate can attack another teammate.'
    }],
    'maps': [{
        'name': 'Developer',
        'description': 'This is the developer map which is used for debugging.'
    },{
        'name': 'City',
        'description': 'This is a city themed map set in the middle of the day.'
    },{
        'name': 'City (Night)',
        'description': 'This is the same map as City though the lighting is set in the middle of the night.'
    }],
    'ranks': ['Unranked (I)', 'Bronze (II)','Bronze (III)','Silver (IV)','Silver (V)','Gold (VI)','Gold (VII)','Platinum (VIII)','Platinum (IX)','Legend (X)','Max']
}

// To be complteted
const commands = [
    {
        'name': 'CHAT',
        'descriptor': 'Sends a message to each player',
        'arguments': [{
            'message': 'contents to display to each player'
        }]
    },{
        'name': 'CLEAR',
        'descriptor': 'Clears the screen.'
    },{
        'name': 'COLOR',
        'descriptor': 'Sets the default console foreground and background colors.',
        'arguments': [{
            'attr': 'Specifies color attribute of console output'
        }],
        'extra': `Color attributes are specified by TWO hex digits -- the first corresponds to the background; the second the foreground. Each digit can be any of the following values:<br>
        <br>
        <table>
            <tbody>
                <tr>
                    <td>0 = Black</td>
                    <td>8 = Gray</td>
                </tr>
                <tr>
                    <td>1 = Blue</td>
                    <td>9 = Light Blue</td>
                </tr>
                <tr>
                    <td>2 = Green</td>
                    <td>A = Light Green</td>
                </tr>
                <tr>
                    <td>3 = Aqua</td>
                    <td>B = Light Aqua</td>
                </tr>
                <tr>
                    <td>4 = Red</td>
                    <td>C = Light Red</td>
                </tr>
                <tr>
                    <td>5 = Purple</td>
                    <td>D = Light Purple</td>
                </tr>
                <tr>
                    <td>6 = Yellow</td>
                    <td>E = Light Yellow</td>
                </tr>
                <tr>
                    <td>7 = White</td>
                    <td>F = Bright White</td>
                </tr>
            </tbody>
        </table>
        <br>
        If no argument is given, this command restores the color to what it was<br>
        when the session started.`,
        'example': '"COLOR 0a" produces light green on black'
    },{
        'name': 'DATA',
        'descriptor': 'Displays the raw game data'
    },{
        'name': 'EXIT',
        'descriptor': 'Exits the current interpreter.',
        'extra': 'Note that you can also press Ctrl+D to achieve the same result'
    },{
        'name': 'FRIENDS',
        'descriptor': 'Returns friends through the internal API.',
        'arguments': [{
            'userid': 'displays all friends of that user'
        }]
    },{
        'name': 'GAMES',
        'descriptor': 'Returns games through the internal API.',
        'arguments': [{
            'gameid': 'displays game information for that game'
        }]
    },{
        'name': 'LIVE',
        'descriptor': 'Returns live information through the internal API.'
    },{
        'name': 'HELP',
        'descriptor': 'Provides Help information for commands.',
        'arguments': [{
            'command': 'displays help information on that command'
        }]
    },{
        'name': 'MYSQL',
        'descriptor': 'Runs a mysql query on the server',
        'arguments': [{
            'command': 'returns the result of that query'
        }]
    },{
        'name': 'SUDO',
        'descriptor': 'Runs a command on the server',
        'arguments': [{
            'command': 'returns the result of that command'
        }]
    }
];

</script>
    </body>
</html>